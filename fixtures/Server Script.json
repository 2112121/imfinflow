[
 {
  "ID": "可以購買扣掉的金額加回",
  "脚本类型": "DocType Event",
  "脚本": "# Script Type: DocType Event\r\n# Reference DocType: ReimbursementRequest\r\n# DocType Event: 保存后\r\n\r\n# 只在已有单据上执行\r\nif not doc.get(\"__islocal\"):\r\n\r\n    # 仅当状态切到「補件申請表」且之前已扣款 == 1时，才跑回冲\r\n    if doc.workflow_state == \"補件申請表\" and doc.已扣款 == 1:\r\n\r\n        # 1. 计算要回冲的金额（使用总金额 - 实际采购总金额，或直接用总金额）\r\n        diff1 = frappe.utils.flt(doc.總金額)\r\n\r\n        # 2. 取出预算账户\r\n        ba = frappe.get_doc(\"BudgetAccount\", doc.預算帳戶)\r\n\r\n        # 3. 计算新的可用余额，并写回 BudgetAccount\r\n        new_balance = (ba.可用餘額 or 0) + diff1\r\n        ba.db_set(\"可用餘額\", new_balance, update_modified=False)\r\n\r\n        # 4. 同步更新当前单据上的可用余额，并把「已扣款」重置为 0\r\n        doc.db_set(\"可用餘額\", new_balance, update_modified=False)\r\n        doc.db_set(\"已扣款\", 0, update_modified=False)\r\n",
  "參考文檔類型": "ReimbursementRequest",
  "事件频率": "All",
  "文档类型事件": "After Save",
  "允许访客": 0,
  "模块（用于导出）": "imfinflow",
  "已禁用": 0,
  "启用速率限制": 0,
  "请求限制": 5,
  "时间窗口（秒）": 86400
 },
 {
  "ID": "已撤销回冲",
  "脚本类型": "DocType Event",
  "脚本": "# Script Type: DocType Event\r\n# Reference DocType: ReimbursementRequest\r\n# DocType Event: 保存后\r\n\r\n# 只在已有单据上执行\r\nif not doc.get(\"__islocal\"):\r\n\r\n    # 仅当状态切到「補件申請表」且之前已扣款 == 1时，才跑回冲\r\n    if doc.workflow_state == \"購入後驗收補件\" and doc.已回沖 == 1:\r\n\r\n        # 1. 计算要回冲的金额（使用总金额 - 实际采购总金额，或直接用总金额）\r\n        diff = frappe.utils.flt(doc.總金額) - frappe.utils.flt(doc.實際購買總金額 or 0)\r\n\r\n        # 2. 取出预算账户\r\n        ba = frappe.get_doc(\"BudgetAccount\", doc.預算帳戶)\r\n\r\n        # 3. 计算新的可用余额，并写回 BudgetAccount\r\n        new_balance = (ba.可用餘額 or 0) - diff\r\n        ba.db_set(\"可用餘額\", new_balance, update_modified=False)\r\n\r\n        # 4. 同步更新当前单据上的可用余额，并把「已扣款」重置为 0\r\n        doc.db_set(\"可用餘額\", new_balance, update_modified=False)\r\n        doc.db_set(\"已回沖\", 0, update_modified=False)\r\n",
  "參考文檔類型": "ReimbursementRequest",
  "事件频率": "All",
  "文档类型事件": "After Save",
  "允许访客": 0,
  "模块（用于导出）": "imfinflow",
  "已禁用": 0,
  "启用速率限制": 0,
  "请求限制": 5,
  "时间窗口（秒）": 86400
 },
 {
  "ID": "總金額-實際購買總金額寫入可用餘額",
  "脚本类型": "DocType Event",
  "脚本": "# Script Type: DocType Event\r\n# Reference DocType: ReimbursementRequest\r\n# DocType Event: 提交后\r\n\r\n# 只在已有单据上执行\r\nif not doc.get(\"__islocal\"):\r\n\r\n    # 仅在“待财务核对纸本凭证与内容”且“已回冲”= 0 时跑回冲\r\n    if doc.workflow_state == \"待財務核對紙本憑證與內容\" and not doc.已回沖:\r\n\r\n        diff2 = frappe.utils.flt(doc.總金額) - frappe.utils.flt(doc.實際購買總金額 or 0)\r\n\r\n        if diff2 > 0 and doc.預算帳戶:\r\n            acct_name = doc.預算帳戶\r\n\r\n            # 1. 重新 load 最新的 BudgetAccount 文档\r\n            acct = frappe.get_doc(\"BudgetAccount\", acct_name)\r\n            acct.reload()\r\n\r\n            # 2. 计算并写回新的可用余额\r\n            new_balance = frappe.utils.flt(acct.可用餘額) + diff2\r\n            acct.db_set(\"可用餘額\", new_balance)\r\n            \r\n            # 3b. 同步更新本單的「可用餘額」\r\n            doc.db_set(\"可用餘額\", new_balance, update_modified=False)\r\n\r\n            # 3. 标记本次已回冲，防止重复\r\n            doc.db_set(\"已回沖\", 1)\r\n\r\n       ",
  "參考文檔類型": "ReimbursementRequest",
  "事件频率": "All",
  "文档类型事件": "After Save",
  "允许访客": 0,
  "模块（用于导出）": "imfinflow",
  "已禁用": 0,
  "启用速率限制": 0,
  "请求限制": 5,
  "时间窗口（秒）": 86400
 },
 {
  "ID": "燈號控管訊息",
  "脚本类型": "DocType Event",
  "脚本": ", 只在「申請表」或「補件申請表」這兩個 State 下執行 if doc.workflow\\_state in (\"申請表\", \"補件申請表\"): , 取出預算帳戶 acct = frappe.get\\_doc(\"BudgetAccount\", doc.預算帳戶) bal = acct.可用餘額 or 0 spend = doc.總金額 or 0 , 紅燈：超額 → 阻擋提交 if spend > bal: frappe.throw( f\"預算不足，無法提交！, \" f\"本單金額：{spend:,.0f} > 可用餘額：{bal:,.0f}\", title=\"超出預算\" ) , 橙燈：超過 60% → 提醒 elif bal and spend \/ bal >= 0.6: frappe.msgprint( f\"提醒：本單金額已達可用預算 {round(spend \/ bal \\* 100)}％，\" f\"提交後剩餘 {bal - spend:,.0f}\", indicator=\"orange\", alert=True, title=\"接近預算上限\" ) , else: 不是這兩個 state，就不做任何事 ",
  "參考文檔類型": "ReimbursementRequest",
  "事件频率": "All",
  "文档类型事件": "After Save",
  "允许访客": 0,
  "模块（用于导出）": "imfinflow",
  "已禁用": 0,
  "启用速率限制": 0,
  "请求限制": 5,
  "时间窗口（秒）": 86400
 },
 {
  "ID": "可以購買扣除對應的可用餘額",
  "脚本类型": "DocType Event",
  "脚本": "# Script Type: DocType Event\r\n# Reference DocType: ReimbursementRequest\r\n# DocType Event: 保存后（已提交文档）\r\n\r\n# 只在已有单据上执行\r\nif not doc.get(\"__islocal\"):\r\n\r\n    # 只在状态切到「可以購買」才跑扣款\r\n    if doc.workflow_state == \"可以購買\" and not doc.已扣款:\r\n\r\n        # 1. 讀出 BudgetAccount\r\n        ba = frappe.get_doc(\"BudgetAccount\", doc.預算帳戶)\r\n\r\n        # 2. 算出新的可用餘額\r\n        new_balance = (ba.可用餘額 or 0) - (frappe.utils.flt(doc.總金額) or 0)\r\n\r\n        # 3a. 更新 BudgetAccount 的「可用餘額」\r\n        ba.db_set(\"可用餘額\", new_balance, update_modified=False)\r\n\r\n        # 3b. 同步更新本單的「可用餘額」\r\n        doc.db_set(\"可用餘額\", new_balance, update_modified=False)\r\n\r\n        # 4. 打标「已扣款」避免重跑\r\n        doc.db_set(\"已扣款\", 1, update_modified=False)\r\n\r\n      ",
  "參考文檔類型": "ReimbursementRequest",
  "事件频率": "All",
  "文档类型事件": "After Save",
  "允许访客": 0,
  "模块（用于导出）": "imfinflow",
  "已禁用": 0,
  "启用速率限制": 0,
  "请求限制": 5,
  "时间窗口（秒）": 86400
 },
 {
  "ID": "轉撥預算",
  "脚本类型": "DocType Event",
  "脚本": "# Script Type: DocType Event\r\n# Reference DocType: BudgetTransfer\r\n# DocType Event: After Submit\r\n\r\n# 1. 取得轉撥金額（None → 0）\r\namt = doc.轉撥預算 or 0\r\n\r\n# 2. 讀取「來源」與「目標」兩個 BudgetAccount 當前的可用餘額（None → 0）\r\ncurr_src = frappe.db.get_value(\"BudgetAccount\", doc.來源預算, \"可用餘額\") or 0\r\ncurr_tgt = frappe.db.get_value(\"BudgetAccount\", doc.目標預算, \"可用餘額\") or 0\r\n\r\n# 3. 計算更新後的新餘額\r\nnew_src = curr_src - amt\r\nnew_tgt = curr_tgt + amt\r\n\r\n# 4. 把新餘額寫回 BudgetAccount\r\nfrappe.db.set_value(\"BudgetAccount\", doc.來源預算, \"可用餘額\", new_src)\r\nfrappe.db.set_value(\"BudgetAccount\", doc.目標預算, \"可用餘額\", new_tgt)\r\n\r\n# 5. （可選）把 before\/after 餘額寫回本單據，以便畫面上直接看到\r\nfrappe.db.set_value(\"BudgetTransfer\", doc.name, {\r\n    \"轉撥前來源可用餘額\": curr_src,\r\n    \"轉撥前目標可用餘額\": curr_tgt,\r\n    \"轉撥後來源可用餘額\": curr_src - amt,\r\n    \"轉撥後目標可用餘額\": curr_tgt + amt\r\n})\r\n",
  "參考文檔類型": "BudgetTransfer",
  "事件频率": "All",
  "文档类型事件": "After Submit",
  "允许访客": 0,
  "模块（用于导出）": "imfinflow",
  "已禁用": 0,
  "启用速率限制": 0,
  "请求限制": 5,
  "时间窗口（秒）": 86400
 },
 {
  "ID": "提交 BudgetAccount 時自動同步可用餘額",
  "脚本类型": "DocType Event",
  "脚本": "# 當使用者提交 BudgetAccount 時，自動同步可用餘額\r\nif doc.核定預算 is not None:\r\n    doc.可用餘額 = doc.核定預算\r\n",
  "參考文檔類型": "BudgetAccount",
  "事件频率": "All",
  "文档类型事件": "After Save",
  "允许访客": 0,
  "模块（用于导出）": "imfinflow",
  "已禁用": 0,
  "启用速率限制": 0,
  "请求限制": 5,
  "时间窗口（秒）": 86400
 }
]